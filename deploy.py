{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eeb41573-20b8-430e-a44e-11677cebb252",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n",
    "import numpy as np\n",
    "\n",
    "# Set page title and layout\n",
    "st.set_page_config(page_title=\"Customer Spending Predictor\", layout=\"wide\")\n",
    "\n",
    "# Custom CSS for background image\n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <style>\n",
    "    .main {\n",
    "        background-image: url('https://th.bing.com/th/id/OIP.6rHjdwhwrL_VCpWWTh1m_gHaHa?pid=ImgDet&w=172&h=172&c=7&dpr=1.1');\n",
    "        background-size: cover;\n",
    "        background-repeat: no-repeat;\n",
    "        background-attachment: fixed;\n",
    "    }\n",
    "    </style>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True\n",
    ")\n",
    "# Load the data\n",
    "df = pd.read_csv(\"Ecommerce_Customers (2).csv\")\n",
    "\n",
    "df = df.drop(columns=['Email','Address','Avatar'])\n",
    "\n",
    "def remove_outliers_iqr(df, column):\n",
    "    Q1 = df[column].quantile(0.25)\n",
    "    Q3 = df[column].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    \n",
    "    # Define the bounds for filtering\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    \n",
    "    # Filter the DataFrame\n",
    "    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n",
    "\n",
    "# Remove outliers for specified columns\n",
    "for col in df.columns:\n",
    "    df = remove_outliers_iqr(df, col)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "columns_to_scale = ['Avg Session Length', 'Time on App', 'Time on Website', 'Length of Membership']\n",
    "df[columns_to_scale] = scaler.fit_transform(df[columns_to_scale])\n",
    "\n",
    "X = df[['Avg Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\n",
    "y = df['Yearly Amount Spent']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "lr = LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "y_pred = lr.predict(X_test)\n",
    "#print(\"Linear Regression - MSE:\", mean_squared_error(y_test, y_pred_lr), \"RÂ²:\", r2_score(y_test, y_pred_lr))\n",
    "\n",
    "\n",
    "st.title(\"Customer Spending Prediction\")\n",
    "st.markdown(\"\"\"\n",
    "This application predicts the *Yearly Amount Spent* by customers based on their behavior metrics. \n",
    "Please use the sidebar to enter customer details for prediction.\n",
    "\"\"\")\n",
    "\n",
    "# Sidebar inputs\n",
    "st.sidebar.header(\"Customer Input\")\n",
    "avg_session_length = st.sidebar.number_input(\"Average Session Length\", min_value=0.0, step=0.1)\n",
    "time_on_app = st.sidebar.number_input(\"Time on App\", min_value=0.0, step=0.1)\n",
    "time_on_website = st.sidebar.number_input(\"Time on Website\", min_value=0.0, step=0.1)\n",
    "length_of_membership = st.sidebar.number_input(\"Length of Membership\", min_value=0.0, step=0.1)\n",
    "\n",
    "# Model performance metrics\n",
    "st.subheader(\"Model Performance\")\n",
    "col1, col2, col3,col4= st.columns(4)\n",
    "with col1:\n",
    "    st.metric(label=\"Mean Absolute Error\", value=f\"{mean_absolute_error(y_test, y_pred):.2f}\")\n",
    "with col2:\n",
    "    st.metric(label=\"Mean Squared Error\", value=f\"{mean_squared_error(y_test, y_pred):.2f}\")\n",
    "with col3:\n",
    "    st.metric(label=\"Root Mean Squared Error\", value=f\"{np.sqrt(mean_squared_error(y_test, y_pred)):.2f}\")\n",
    "with col4:\n",
    "    st.metric(label=\"R2_Score\", value=f\"{r2_score(y_test, y_pred):.2f}\")\n",
    "\n",
    "# Prediction\n",
    "if st.sidebar.button(\"Predict\"):\n",
    "    # Collect and scale the user input data\n",
    "    new_data = np.array([[avg_session_length, time_on_app, time_on_website, length_of_membership]])\n",
    "    new_data_scaled = scaler.transform(new_data)  # Apply the same scaler used on training data\n",
    "    \n",
    "    # Predict using the scaled data\n",
    "    prediction = lr.predict(new_data_scaled)\n",
    "    \n",
    "    # Display the result\n",
    "    st.subheader(\"Prediction Result\")\n",
    "    st.success(f\"Predicted Yearly Amount Spent: *${prediction[0]:.2f}*\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
